#!/bin/bash -l
#Make our script a little bit safer
set -eo pipefail

log::m-info "Writing $APP database.yml ..."
cat > /home/yeti-web/config/database.yml <<EOF
production:
  adapter: postgresql
  encoding: unicode
  database: $ROUTING_DB_NAME
  pool: 5
  username: $ROUTING_POSTGRES_USER
  password: $ROUTING_POSTGRES_PASSWORD
  host: $ROUTING_POSTGRES_HOST
  schema_search_path: 'gui,public,switch,billing,class4,runtime_stats,sys,logs,data_import'
  port: $ROUTING_POSTGRES_PORT
  min_messages: notice

secondbase:
  production:
    adapter: postgresql
    encoding: unicode
    database: $CDR_DB_NAME
    pool: 5
    username: $CDR_POSTGRES_USER
    password: $CDR_POSTGRES_PASSWORD
    host: $CDR_POSTGRES_HOST
    schema_search_path: 'cdr,reports,billing'
    port: $CDR_POSTGRES_PORT
    min_messages: notice
EOF

log::m-info "Sending our logs to stdout..."
sed -ie "s/Logger::Syslog.new('YETI-admin', Syslog::LOG_LOCAL7)/Logger.new(STDOUT)/g" /home/yeti-web/config/environments/production.rb
sed -ie "s/:info/:$YETIWEB_LOG_LEVEL/g" /home/yeti-web/config/environments/production.rb


log::m-info "Writing $APP unicorn.rb ..."
cat > /home/yeti-web/config/unicorn.rb <<EOF
worker_processes $YETIWEB_WORKERS
user "yeti-web", "yeti-web"
working_directory "/home/yeti-web" # available in 0.94.0+

listen "$YETIWEB_LISTEN", backlog: 1024

timeout 1800

pid "/home/yeti-web/yeti-web-unicorn.pid"

#stderr_path "/home/yeti-web/log/unicorn.stderr.log"
#stdout_path "/home/yeti-web/log/unicorn.stdout.log"

# combine Ruby 2.0.0dev or REE with "preload_app true" for memory savings
# http://rubyenterpriseedition.com/faq.html#adapt_apps_for_cow
preload_app true
GC.respond_to?(:copy_on_write_friendly=) and
  GC.copy_on_write_friendly = true

# Enable this flag to have unicorn test client connections by writing the
# beginning of the HTTP headers before calling the application.  This
# prevents calling the application for connections that have disconnected
# while queued.  This is only guaranteed to detect clients on the same
# host unicorn runs on, and unlikely to detect disconnects even on a
# fast LAN.
#check_client_connection false

before_fork do |server, worker|
  # the following is highly recomended for Rails + "preload_app true"
  # as there's no need for the master process to hold a connection
  ActiveRecord::Base.connection.disconnect!
  Cdr::Base.connection.disconnect!

  # The following is only recommended for memory/DB-constrained
  # installations.  It is not needed if your system can house
  # twice as many worker_processes as you have configured.
  #
  # # This allows a new master process to incrementally
  # # phase out the old master process with SIGTTOU to avoid a
  # # thundering herd (especially in the "preload_app false" case)
  # # when doing a transparent upgrade.  The last worker spawned
  # # will then kill off the old master process with a SIGQUIT.
  # old_pid = "#{server.config[:pid]}.oldbin"
  # if old_pid != server.pid
  #   begin
  #     sig = (worker.nr + 1) >= server.worker_processes ? :QUIT : :TTOU
  #     Process.kill(sig, File.read(old_pid).to_i)
  #   rescue Errno::ENOENT, Errno::ESRCH
  #   end
  # end
  #
  # Throttle the master from forking too quickly by sleeping.  Due
  # to the implementation of standard Unix signal handlers, this
  # helps (but does not completely) prevent identical, repeated signals
  # from being lost when the receiving process is busy.
  # sleep 1
end

after_fork do |server, worker|
  # per-process listener ports for debugging/admin/migrations
  # addr = "127.0.0.1:#{9293 + worker.nr}"
  # server.listen(addr, :tries => -1, :delay => 5, :tcp_nopush => true)

  # the following is *required* for Rails + "preload_app true",
  ActiveRecord::Base.establish_connection
  SecondBase::Base.establish_connection

  # if preload_app is true, then you may also want to check and
  # restart any other shared sockets/descriptors such as Memcached,
  # and Redis.  TokyoCabinet file handles are safe to reuse
  # between any number of forked children (assuming your kernel
  # correctly implements pread()/pwrite() system calls)
end
EOF

log::m-info "Writing $APP pgq_processors.yml ..."
cat > /home/yeti-web/config/pgq_processors.yml <<EOF
cdr_billing:
  mode: production
  class: cdr_billing
  queue: cdr_billing
  consumer: cdr_billing
  syslog_program_name: "YETI-cdr-billing"
  mail_to: "bug-report@yeti-switch.org"
  mail_from: "yeti-cdr-billing@example.com"
  mail_subject: "Exception happened in CDR billing"

cdr_http:
  mode: production
  class: cdr_http
  queue: cdr_billing
  consumer: cdr_billing
  syslog_program_name: "YETI-cdr-billing"
  mail_to: "bug-report@yeti-switch.org"
  mail_from: "yeti-cdr-billing@example.com"
  mail_subject: "Exception happened in CDR http"
  url: "http://example.com/api/cdrs"
  method: POST
  # may be an array:
  #  cdr_fields: [
  #                 'id', 'src_prefix_in', 'src_prefix_out', 'dst_prefix_in', 'dst_prefix_out', 'time_start',
  #                 'time_connect', 'time_end',  'duration', 'customer', 'vendor',  'destination_fee',
  #                 'destination_initial_interval', 'destination_initial_rate', 'destination_next_interval',
  #                 'destination_next_rate', 'customer_price',  'orig_call_id', 'local_tag', 'term_call_id'
  #              ]
  cdr_fields: all
EOF

log::m-info "Setting some RAILS variables..."
export RAILS_ENV=production
export RACK_ENV=production
export RAKE_ENV=production
export BUNDLE_GEMFILE=/home/yeti-web/Gemfile
export GEM_PATH=/home/yeti-web/vendor/bundler

log::m-info "Copying public data to shared directory if exists..."
if [[ -d /data ]]
  then cp -r $HOME/public /data
fi

if [[ $INIT = "true" ]]; then
    log::m-info "Running init scripts..."
    for f in /yeti-init.d/*; do
        case "$f" in
            *.sh)     echo "$0: running $f"; . "$f" ;;
            *)        echo "$0: ignoring $f" ;;
        esac
	    echo
    done
    exit 0
fi

log::m-info "Ensuring permissions ..."
chown -R $USER:$USER /home/yeti-web

log::m-info "Choosing an appropriate mode for running..."
case $ROLE in
  yeti)
    log::m-info "Starting $ROLE role ..."
    cd ~
    exec gosu $USER bin/bundle exec unicorn -c /home/yeti-web/config/unicorn.rb -E production ;;
  delayed_job)
    cd ~
    exec gosu $USER bin/bundle exec rake jobs:work ;;
  cdr_billing)
    cd /home/yeti-web/pgq-processors
    export BUNDLE_GEMFILE=/home/yeti-web/pgq-processors/Gemfile
    export GEM_PATH=/home/yeti-web/pgq-processors/vendor/bundler
    exec gosu $USER bin/bundle exec rake pgq:worker processor=cdr_billing pid_file=/tmp/cdr_billing.pid config_file=/home/yeti-web/config/pgq_processors.yml ;;
esac